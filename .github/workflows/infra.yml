name: Infra             

on:                     
  workflow_dispatch:    
    inputs:             
      env:
        description: Which environment to target (dev/prod)
        type: choice
        required: true
        options: [dev, prod]
      action:
        description: What Terraform action to run
        type: choice
        required: true
        options: [plan, apply, destroy]

permissions:            # Fine-grained token permissions for this workflow
  id-token: write       
  contents: read        
  packages: read        

jobs:
  terraform:           
    runs-on: ubuntu-latest     

    env:                
      TF_DIR: infra/terraform/envs/${{ inputs.env }}  
      AWS_REGION: ${{ secrets.AWS_REGION }}          

    steps:
      - name: Checkout
        uses: actions/checkout@v4   # Pulls our repo code into the runner

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}  
          aws-region: ${{ env.AWS_REGION }}                  # Region for API calls

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3    # Installs Terraform on runner
        with:
          terraform_version: 1.13.0           

      - name: Terraform Init (S3 per-env)
        shell: bash
        run: |
          set -euo pipefail
          # Initialize backend pointing to S3; key splits state by env (dev/prod)
          terraform -chdir="$TF_DIR" init \
            -backend-config="bucket=${{ secrets.TFSTATE_BUCKET }}" \
            -backend-config="key=backenderer/${{ inputs.env }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate
        run: terraform -chdir="$TF_DIR" validate   # Sanity-check 

      - name: Terraform Plan
        if: inputs.action == 'plan'
        run: terraform -chdir="$TF_DIR" plan -input=false   # Show what would change??

      - name: Terraform Apply
        if: inputs.action == 'apply'
        run: terraform -chdir="$TF_DIR" apply -auto-approve -input=false  # Make some changes

      - name: Terraform Destroy
        if: inputs.action == 'destroy'
        run: terraform -chdir="$TF_DIR" destroy -auto-approve -input=false  # Tear it down baby!
