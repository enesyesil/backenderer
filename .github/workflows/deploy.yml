name: Deploy App                       

on:
  workflow_dispatch:                   
    inputs:
      env:
        description: Target environment (dev/prod)
        type: choice
        required: true
        options: [dev, prod]
      config_file:
        description: Path to app config (e.g., examples/single-app.yaml)
        required: true
        default: examples/single-app.yaml
      tls_mode:
        description: TLS mode
        type: choice
        required: true
        options: [none, letsencrypt, alb]

permissions:
  id-token: write                      
  contents: read                       
  packages: write                      

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      TF_DIR: infra/terraform/envs/${{ inputs.env }}      
      AWS_REGION: ${{ secrets.AWS_REGION }}
      # (Optional) ECR fallback if you use ECR instead of GHCR:
      # ECR_REPO: ${{ secrets.ECR_REPO }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4                        

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4   # Assume role into AWS
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.0

      - name: Terraform Init (read correct env state)
        run: |
          set -euo pipefail
          terraform -chdir="$TF_DIR" init \
            -backend-config="bucket=${{ secrets.TFSTATE_BUCKET }}" \
            -backend-config="key=backenderer/${{ inputs.env }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true"
       

      - name: Read Terraform outputs
        id: tfout
        run: |
          terraform -chdir="$TF_DIR" output -json > tfout.json
          echo "instance_id=$(jq -r .instance_id.value tfout.json)" >> $GITHUB_OUTPUT
          echo "instance_public_ip=$(jq -r .instance_public_ip.value tfout.json)" >> $GITHUB_OUTPUT
          # Add more outputs as needed (e.g., alb_dns_name)

      - name: Validate app config against schema
        run: |
          # Uses your JSON schema to validate YAML/JSON config
          pipx install check-jsonschema
          check-jsonschema --schemafile docs/config.schema.json ${{ inputs.config_file }}

      - name: Login to GHCR
        if: ${{ !cancelled() }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        

      - name: Build and push image
        run: |
          IMAGE="ghcr.io/${{ github.repository_owner }}/$(basename ${{ github.repository }}):${{ inputs.env }}"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"
        

      - name: Upload app config to SSM
        run: |
          # Store the deploy config so EC2 host scripts can read it
          aws ssm put-parameter \
            --name "/backenderer/${{ inputs.env }}/config" \
            --type "String" \
            --overwrite \
            --value "$(cat ${{ inputs.config_file }})"

      - name: Register app on EC2 (via SSM)
        run: |
          # Remotely execute register.sh on the instance
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ steps.tfout.outputs.instance_id }}" \
            --comment "Backenderer register app" \
            --parameters commands='[
              "set -e",
              "/opt/backenderer/bin/register.sh /backenderer/${{ inputs.env }}/config"
            ]' \
            --output text
        

      - name: Setup TLS with Letâ€™s Encrypt (optional)
        if: ${{ inputs.tls_mode == 'letsencrypt' }}
        run: |
          # Install certbot on the instance and request cert for your host
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ steps.tfout.outputs.instance_id }}" \
            --comment "Install certbot + request certificate" \
            --parameters commands='[
              "if command -v apt-get >/dev/null 2>&1; then sudo apt-get update -y && sudo apt-get install -y certbot python3-certbot-nginx; elif command -v dnf >/dev/null 2>&1; then sudo dnf install -y certbot python3-certbot-nginx; elif command -v yum >/dev/null 2>&1; then sudo yum install -y certbot python3-certbot-nginx; else echo \"Unsupported package manager\" >&2; exit 1; fi",
              "sudo certbot --nginx -d $(yq -r .apps[0].host ${{ inputs.config_file }}) --non-interactive --agree-tos -m you@example.com"
            ]' \
            --output text
        #certbot install + issue TLS cert tied to the host in the config.
